{"version":3,"file":"static/js/27.58d0a076.chunk.js","mappings":"sNAAaA,EAAkC,CAC7C,OAAU,KACV,OAAU,KACV,KAAQ,KACR,MAAS,KACT,IAAO,KACP,KAAQ,KACR,KAAQ,KACR,OAAU,KACV,QAAW,KACX,QAAW,KACX,OAAU,KACV,OAAU,MAECC,EAAkB,CAAC,KAAK,KAAM,KAAM,KAAM,MAAO,KAAM,MACvDC,EAAqB,CAChC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAEjCC,EAAyB,CACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAEjCC,EAAgB,CAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC3E,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAErBC,EAAgB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAEhCC,EAAuC,CAClsBC5EGC,EAAUC,EAAAA,GAAAA,IAAH,+LAYPC,EAAOD,EAAAA,GAAAA,IAAH,wIAQJE,EAAaF,EAAAA,GAAAA,IAAH,8QAeVG,EAAUH,EAAAA,GAAAA,IAAH,uNACP,qBAAEI,OAAoB,YAAc,UAE3B,qBAAGA,OAAuB,UAAY,iBAM/C,qBAAGA,OAAuB,UAAY,aAQtCC,GAJWL,EAAAA,GAAAA,IAAH,yCACR,qBAAEM,QAAsB,QAAU,UAG5BN,EAAAA,GAAAA,IAAH,oP,WCqBhB,EAvD4C,SAAC,GAAuB,IAAD,IAApBO,KAAAA,OAAoB,MAAb,OAAa,EACjE,GAAgCC,EAAAA,EAAAA,UAAmB,CAACV,EAAUS,KAA9D,eAAOE,EAAP,KAAiBC,EAAjB,KACA,GAA4BF,EAAAA,EAAAA,UAAiB,IAA7C,eAAOJ,EAAP,KAAeO,EAAf,KACA,GAAoCH,EAAAA,EAAAA,UAClCI,SAASL,GAAQ,IAAM,EAAIZ,EAAeD,GAD5C,eAAOmB,EAAP,UAeA,OAZAC,EAAAA,EAAAA,YAAU,WACR,IAAIC,EAAON,EACXO,OAAOC,KAAKzB,GAAQ0B,KAAI,SAACC,EAAMC,GACzBA,GAAO,IACTL,EAAKM,MAAMR,EAAWO,GAAOL,EAAKK,IAAQ,MAG9CV,GAAY,OAAIK,MACf,KACHD,EAAAA,EAAAA,YAAU,WACRQ,QAAQC,IAAI,WAAYnB,KACvB,CAACA,KAEF,SAAC,KAAD,WACE,UAACL,EAAD,YACE,0BAAKQ,EAAL,WACA,SAACN,EAAD,UACGe,OAAOC,KAAKzB,GAAQ0B,KAAI,SAACM,EAAOC,GAAR,OACvB,UAACpB,EAAD,YACE,2BAAQmB,KACR,SAACtB,EAAD,UACGT,EAAMyB,KAAI,SAACQ,EAAMN,GAAP,OACT,0BAAiBM,GAANN,SAGf,UAAClB,EAAD,WACGL,EAAIqB,KACH,SAACC,GAAD,OAAUA,GAAQV,EAASgB,KAAU,kBAAUN,MAEhDvB,EAAIsB,KAAI,SAACC,EAAMQ,GAAP,OACPR,GAAQN,EAAWY,KAAU,SAACtB,EAAD,CAC3BC,OAAQG,EAAO,IAAMf,EAAOgC,GAAS,IAAML,IAASf,EAEpDwB,QAAS,WACPjB,EAAUJ,EAAO,IAAMf,EAAOgC,GAAS,IAAML,IAJpB,UAO3B,uBAAIA,KALCQ","sources":["data/calendar-data.ts","components/common/year-calendar/styles-year-calendar.ts","components/common/year-calendar/year-calendar.tsx"],"sourcesContent":["export const months: {[key: string]: string} = {\r\n  'Yanvar': '01',\r\n  'Fevral': '02',\r\n  'Mart': '03',\r\n  'Aprel': '04',\r\n  'May': '05',\r\n  'Iyun': '06',\r\n  'Iyul': '07',\r\n  'Avgust': '08',\r\n  'Sentabr': '09',\r\n  'Oktyabr': '10',\r\n  'Noyabr': '11',\r\n  'Dekaby': '12',\r\n};\r\nexport const weeks: string[] = ['Ya','Du', 'Se', 'Ch', 'Pay', 'Ju', 'Sh'];\r\nexport const monthDay: number[] = [\r\n  31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,\r\n];\r\nexport const leapMonthDay: number[] = [\r\n  31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,\r\n];\r\nexport const day: number[] = [\r\n  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\r\n  23, 24, 25, 26, 27, 28, 29, 30, 31,\r\n];\r\nexport const emp: number[] = [1, 2, 3, 4, 5, 6];\r\n\r\nexport const startDate: { [key: string]: number } = {\r\n  '2000': 6,\r\n  '2001': 1,\r\n  '2002': 2,\r\n  '2003': 3,\r\n  '2004': 4,\r\n  '2005': 6,\r\n  '2006': 0,\r\n  '2007': 1,\r\n  '2008': 2,\r\n  '2009': 4,\r\n  '2010': 5,\r\n  '2011': 6,\r\n  '2012': 0,\r\n  '2013': 2,\r\n  '2014': 3,\r\n  '2015': 4,\r\n  '2016': 5,\r\n  '2017': 0,\r\n  '2018': 1,\r\n  '2019': 2,\r\n  '2020': 3,\r\n  '2021': 5,\r\n  '2022': 6,\r\n  '2023': 0,\r\n  '2024': 1,\r\n  '2025': 3,\r\n  '2026': 4,\r\n  '2027': 5,\r\n  '2028': 6,\r\n  '2029': 1,\r\n  '2030': 2,\r\n  '2031': 3,\r\n  '2032': 4,\r\n  '2033': 6,\r\n  '2034': 0,\r\n  '2035': 1,\r\n  '2036': 2,\r\n  '2037': 4,\r\n  '2038': 5,\r\n  '2039': 6,\r\n  '2040': 0,\r\n  '2041': 2,\r\n  '2042': 3,\r\n  '2043': 4,\r\n  '2044': 5,\r\n  '2045': 0,\r\n  '2046': 1,\r\n  '2047': 2,\r\n  '2048': 3,\r\n  '2049': 5,\r\n  '2050': 6,\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  width: 100%;\r\n  background: #ffffff;\r\n  border-radius: 7px;\r\n  padding: 20px;\r\n  h1 {\r\n    text-align: center;\r\n    font-size: 30px;\r\n    margin-bottom: 20px;\r\n  }\r\n`;\r\n\r\nexport const Card = styled.div`\r\n  width: 100%;\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr;\r\n  column-gap: 60px;\r\n  row-gap: 40px;\r\n`;\r\n\r\nexport const DisplayBox = styled.div`\r\n  width: 100%;\r\n  display: grid;\r\n  grid-template-columns: repeat(7, 1fr);\r\n  font-weight: 500;\r\n  font-size: 16px;\r\n  line-height: 19px;\r\n  span {\r\n    display: flex;\r\n    align-items: center;\r\n    text-align: center;\r\n    color: #333333;\r\n  }\r\n`;\r\n\r\nexport const DayCard = styled.div<{ active?: boolean }>`\r\n  padding: ${({active})=> active ? '15px 11px' : '11px'};\r\n  border-radius: 50%;\r\n  background-color: ${({ active }) => (active ? '#0496ff' : 'transparent')};\r\n  cursor: pointer;\r\n  p {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: ${({ active }) => (active ? '#ffffff' : '#666666')};\r\n  }\r\n`;\r\n\r\nexport const EmptyDay = styled.div<{appears?: boolean}>`\r\n  display: ${({appears})=> appears ? 'block' : 'none'};\r\n`\r\n\r\nexport const Box = styled.div`\r\n  width: 100%;\r\n  label {\r\n    font-weight: 700;\r\n    font-size: 20px;\r\n    line-height: 24px;\r\n    display: flex;\r\n    align-items: center;\r\n    text-align: center;\r\n    color: #000000;\r\n    margin-bottom: 20px;\r\n  }\r\n`;\r\n","import { FC, useEffect, useState } from 'react';\r\nimport { GeneralContainer } from '..';\r\nimport { YearCalendarProps } from './types-year-calendar';\r\nimport {\r\n  day,\r\n  emp,\r\n  leapMonthDay,\r\n  months,\r\n  monthDay,\r\n  startDate,\r\n  weeks,\r\n} from '@src/data/calendar-data';\r\nimport {\r\n  Box,\r\n  Card,\r\n  DayCard,\r\n  DisplayBox,\r\n  Wrapper,\r\n} from './styles-year-calendar';\r\n\r\nconst YearCalendar: FC<YearCalendarProps> = ({ year = '2005' }) => {\r\n  const [countEmp, setCountEmp] = useState<number[]>([startDate[year]]);\r\n  const [active, setActive] = useState<string>('');\r\n  const [asMonthDay, setAsMonthDay] = useState<number[]>(\r\n    parseInt(year) % 4 === 0 ? leapMonthDay : monthDay\r\n  );\r\n  useEffect(() => {\r\n    let temp = countEmp;\r\n    Object.keys(months).map((item, idx) => {\r\n      if (idx <= 11) {\r\n        temp.push((asMonthDay[idx] + temp[idx]) % 7);\r\n      }\r\n    });\r\n    setCountEmp([...temp]);\r\n  }, []);\r\n  useEffect(() => {\r\n    console.log('active: ', active);\r\n  }, [active]);\r\n  return (\r\n    <GeneralContainer>\r\n      <Wrapper>\r\n        <h1>{year}-yil</h1>\r\n        <Card>\r\n          {Object.keys(months).map((month, index) => (\r\n            <Box>\r\n              <label>{month}</label>\r\n              <DisplayBox>\r\n                {weeks.map((week, idx) => (\r\n                  <span key={idx}>{week}</span>\r\n                ))}\r\n              </DisplayBox>\r\n              <DisplayBox>\r\n                {emp.map(\r\n                  (item) => item <= countEmp[index] && <div key={item}></div>\r\n                )}\r\n                {day.map((item, idx1) => (\r\n                  item <= asMonthDay[index] && <DayCard\r\n                    active={year + '.' + months[month] + '.' + item === active}\r\n                    key={idx1}\r\n                    onClick={() => {\r\n                      setActive(year + '.' + months[month] + '.' + item);\r\n                    }}\r\n                  >\r\n                    <p>{item}</p>\r\n                  </DayCard>\r\n                ))}\r\n              </DisplayBox>\r\n            </Box>\r\n          ))}\r\n        </Card>\r\n      </Wrapper>\r\n    </GeneralContainer>\r\n  );\r\n};\r\n\r\nexport default YearCalendar;\r\n"],"names":["months","weeks","monthDay","leapMonthDay","day","emp","startDate","Wrapper","styled","Card","DisplayBox","DayCard","active","Box","appears","year","useState","countEmp","setCountEmp","setActive","parseInt","asMonthDay","useEffect","temp","Object","keys","map","item","idx","push","console","log","month","index","week","idx1","onClick"],"sourceRoot":""}